// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Profession {
  id Int @id @default(autoincrement())
  description String
  users User[]
} 

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  accessLevel String
  password String
  status       Boolean   @default(true)

  profession Profession @relation(fields: [professionId], references: [id])
  professionId Int

  carts Cart[]
  payments Payment[]
  loads Load[]
  transactions Transaction[]

  @@map("users")
}

model Client {
  id String @id
  name String
  phone String
  address String
  city String
  salesman String
  serviceDay String
  cnpj String
  status Boolean @default(true)

  carts Cart[]
  payments Payment[]
  transaction Transaction[]

  @@map("clients")
}

model Product {
  id Int @id
  name String
  price Decimal @default(0.0)
  segment String
  supplier String
  weight Decimal
  packaging String
  status Boolean @default(true)

  cartItens CartItem[]
}

model Transaction {
  id Int @id @default(autoincrement())
  method String
  price Decimal @default(0.0)
  createdAt DateTime @default(now())
  description String
  type String
  status String @default("ativa")
  canceledAt DateTime?
  clientId String
  client Client @relation(fields: [clientId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])

  @@map("transaction")
}

model PaymentMethod {
  id Int @id @default(autoincrement())
  name String
  status Boolean @default(true)

  carts Cart[]
  payments Payment[]

  @@map("formpayments")
}

// MUDAR O ID DE TODOS OS MODEL PARA STRING E TRATAR TODO PARA STRING!!!
model Cart {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  total     Decimal @default(0.0)
  quantity  Int @default(0)
  weight Int?

  clientId  String       // ID do cliente obtido da API
  client Client @relation(fields: [clientId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])
  
  cartItems CartItem[]
  
  paymentId Int
  payment PaymentMethod @relation(fields: [paymentId], references: [id])

  loadId Int?
  load Load? @relation(fields: [loadId], references: [id])

  statusDelivery String @default("pendente")


  @@map("carts")
}

model CartItem {
  id        Int     @id @default(autoincrement())

  cartId    Int
  cart      Cart    @relation( fields: [cartId], references: [id])
  productId Int     // ID do produto obtido da API
  product Product @relation(fields: [productId], references: [id])

  productName String // Nome do produto, armazenado para histórico
  price     Decimal @default(0.0)   // Preço do produto no momento da adição ao carrinho
  quantity  Int
  total     Decimal @default(0.0)   // Calculado como quantidade * preço


  @@map("cartItems")
}

model Payment {
  id Int @id @default(autoincrement())
  value Decimal @default(0.0)
  createdAt DateTime @default(now())

  clientId String
  client Client @relation(fields: [clientId], references: [id])

  paymentId Int
  payment PaymentMethod @relation(fields: [paymentId], references: [id])

  userId Int
  user User @relation(fields: [userId], references: [id])

  @@map("payments")
} 

model Vehicles {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  model String
  licensePlate String @unique
  brand String
  weight Int
  status Boolean @default(true)

  loads Load[]
  
  @@map("vehicles")
}

model Load {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())

  vehiclesId Int
  vehicle Vehicles @relation(fields: [vehiclesId], references: [id])

  carts Cart[]

  userId Int
  user User @relation(fields: [userId], references: [id])
  status String @default("aberta")
  quantity Int?
  total Decimal? @default(0.0)
  weight Int?

  @@map("loads")
} 